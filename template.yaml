AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Globals:
  Function:
    Runtime: python3.9
    MemorySize: 128
    Timeout: 100
    Tracing: Active
    
Parameters:
  UserPoolAdminGroupName:
    Description: User pool group name for API administrators
    Type: String
    Default: apiAdmins
Resources:
  StorageUnitsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: StorageUnits
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      BillingMode: PAY_PER_REQUEST
    Metadata:
      SamResourceId: StorageUnitsTable
  StorageBookingsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: StorageBookings
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      BillingMode: PAY_PER_REQUEST
    Metadata:
      SamResourceId: StorageBookingsTable
  RestAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      DefinitionBody:
        openapi: 3.0.1
        info:
          title: Storage API
          description: API for managing storage units
          version: '1.0'
        paths:
          /storage/units/book:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:BookStorageUnitFunction/invocations
                passthroughBehavior: when_no_match
                type: aws_proxy
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/ApplicationJsonModel'
              responses:
                '200':
                  description: Successful booking
          /discounts:
            post:
              security:
                - LambdaTokenAuthorizer: []
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri: arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:140023393647:function:payment-billing-stack-ApplyDiscountFunction-udf79OmlB3aB/invocations
                passthroughBehavior: when_no_match
          /billing:
            post:
              security:
                - LambdaTokenAuthorizer: []
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri: arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:140023393647:function:payment-billing-stack-CreateBillingRecordFunction-INkwWwpT51Vz/invocations
                passthroughBehavior: when_no_match
          /payment-methods:
            post:
              security:
                - LambdaTokenAuthorizer: []
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri: arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:140023393647:function:payment-billing-stack-AddPaymentMethodFunction-2W3iu2ExDqGq/invocations
                passthroughBehavior: when_no_match
          /payment-methods/{paymentMethodId}:
            put:
              parameters:
                - name: paymentMethodId
                  in: path
                  required: true
                  schema:
                    type: string
              security:
                - LambdaTokenAuthorizer: []
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri: arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:140023393647:function:payment-billing-stack-UpdatePaymentMethodFunction-UFQ013dcShSf/invocations
                passthroughBehavior: when_no_match
            delete:
              parameters:
                - name: paymentMethodId
                  in: path
                  required: true
                  schema:
                    type: string
              security:
                - LambdaTokenAuthorizer: []
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri: arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:140023393647:function:payment-billing-stack-DeletePaymentMethodFunction-nrmBUUgDGwm9/invocations
                passthroughBehavior: when_no_match
          /rental_management:
            options:
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: string
                    Access-Control-Allow-Methods:
                      schema:
                        type: string
                    Access-Control-Allow-Headers:
                      schema:
                        type: string
                  content: {}
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: when_no_match
                type: mock
          /storage/unlockUnit:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                uri: arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:140023393647:function:unlockUnit/invocations
                responses:
                  default:
                    statusCode: 200
                passthroughBehavior: when_no_match
                timeoutInMillis: 29000
                contentHandling: CONVERT_TO_TEXT
                type: aws
          /storage/units:
            get:
              responses:
                '400':
                  description: 400 response
                  content: {}
                '500':
                  description: 500 response
                  content: {}
                '200':
                  description: 200 response
                  content: {}
              x-amazon-apigateway-integration:
                httpMethod: GET
                uri: arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:140023393647:function:serverless-convenient-sel-ListStorageUnitsFunction-B6jT1mRQQrEL/invocations
                passthroughBehavior: when_no_match
                type: aws_proxy
          /rental_management/cancelling:
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                uri: arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:140023393647:function:cancelling/invocations
                responses:
                  default:
                    statusCode: 200
                passthroughBehavior: when_no_match
                timeoutInMillis: 29000
                contentHandling: CONVERT_TO_TEXT
                type: aws_proxy
          /storage/notifyUnlock:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                uri: arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:140023393647:function:notifyUnlock/invocations
                responses:
                  default:
                    statusCode: 200
                passthroughBehavior: when_no_match
                timeoutInMillis: 29000
                contentHandling: CONVERT_TO_TEXT
                type: aws
          /storage/shareAccess:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                uri: arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:140023393647:function:shareAccess/invocations
                responses:
                  default:
                    statusCode: 200
                passthroughBehavior: when_no_match
                timeoutInMillis: 29000
                contentHandling: CONVERT_TO_TEXT
                type: aws
          /customer-support:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                uri: arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:140023393647:function:customer_support/invocations
                responses:
                  default:
                    statusCode: 200
                passthroughBehavior: when_no_match
                timeoutInMillis: 29000
                contentHandling: CONVERT_TO_TEXT
                type: aws
            put:
              x-amazon-apigateway-integration:
                httpMethod: POST
                uri: arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:140023393647:function:customer_support/invocations
                responses:
                  default:
                    statusCode: 200
                passthroughBehavior: when_no_match
                timeoutInMillis: 29000
                contentHandling: CONVERT_TO_TEXT
                type: aws
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                uri: arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:140023393647:function:customer_support/invocations
                responses:
                  default:
                    statusCode: 200
                passthroughBehavior: when_no_match
                timeoutInMillis: 29000
                contentHandling: CONVERT_TO_TEXT
                type: aws
          /storage/lock-unit:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                uri: arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:140023393647:function:lockUnit/invocations
                responses:
                  default:
                    statusCode: 200
                passthroughBehavior: when_no_match
                timeoutInMillis: 29000
                contentHandling: CONVERT_TO_TEXT
                type: aws
        components:
          schemas:
            ApplicationJsonModel:
              type: object
              properties:
                unit_id:
                  type: string
                customer_id:
                  type: string
                start_date:
                  type: string
                  format: date
                end_date:
                  type: string
                  format: date
                payment_method:
                  type: string
              required:
                - unit_id
                - customer_id
                - start_date
                - end_date
                - payment_method
          securitySchemes:
            LambdaTokenAuthorizer:
              type: apiKey
              name: Authorization
              in: header
              x-amazon-apigateway-authtype: custom
              x-amazon-apigateway-authorizer:
                type: token
                authorizerUri: arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:140023393647:function:payment-billing-stack-AuthorizerFunction-H26YZsmGRApV/invocations
                authorizerResultTtlInSeconds: 300
      TracingEnabled: true
      Tags:
        Name:
          Fn::Sub: ${AWS::StackName}-API
        Stack:
          Fn::Sub: ${AWS::StackName}
    Metadata:
      SamResourceId: RestAPI
  ListStorageUnitsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: list_storage_units.lambda_handler
      Runtime: python3.9
      CodeUri: s3://aws-sam-cli-managed-default-samclisourcebucket-ftgx7jferlt7/serverless-convenient-storage-solution/60f0b583a968e2c78025b22bf35fb4ab
      Environment:
        Variables:
          TABLE_NAME: StorageUnits
      Events:
        GetUnits:
          Type: Api
          Properties:
            RestApiId:
              Ref: RestAPI
            Path: /storage/units
            Method: get
    Metadata:
      SamResourceId: ListStorageUnitsFunction
  BookStorageUnitFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: booking.lambda_handler
      Runtime: python3.9
      CodeUri: s3://aws-sam-cli-managed-default-samclisourcebucket-ftgx7jferlt7/serverless-convenient-storage-solution/746fc0761bb67d3c1c8dc725d0b8e083
      Environment:
        Variables:
          UNITS_TABLE: StorageUnits
          BOOKINGS_TABLE: StorageBookings
      Policies:
      - Statement:
          Effect: Allow
          Action:
          - dynamodb:GetItem
          Resource:
          - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/StorageUnits
      - Statement:
          Effect: Allow
          Action:
          - dynamodb:PutItem
          Resource:
          - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/StorageBookings
      Events:
        PostBooking:
          Type: Api
          Properties:
            RestApiId:
              Ref: RestAPI
            Path: /storage/units/book
            Method: post
            RequestModel:
              Model: ApplicationJsonModel
              Required: true
    Metadata:
      SamResourceId: BookStorageUnitFunction
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName:
        Fn::Sub: ${AWS::StackName}-UserPool
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AutoVerifiedAttributes:
      - email
      Schema:
      - Name: name
        AttributeDataType: String
        Mutable: true
        Required: true
      - Name: email
        AttributeDataType: String
        Mutable: true
        Required: true
      UsernameAttributes:
      - email
      UserPoolTags:
        Key: Name
        Value:
          Fn::Sub: ${AWS::StackName} User Pool
    Metadata:
      SamResourceId: UserPool
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName:
        Fn::Sub: ${AWS::StackName}UserPoolClient
      ExplicitAuthFlows:
      - ALLOW_USER_PASSWORD_AUTH
      - ALLOW_USER_SRP_AUTH
      - ALLOW_REFRESH_TOKEN_AUTH
      GenerateSecret: false
      PreventUserExistenceErrors: ENABLED
      RefreshTokenValidity: 30
      SupportedIdentityProviders:
      - COGNITO
      UserPoolId:
        Ref: UserPool
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
      - code
      AllowedOAuthScopes:
      - email
      - openid
      CallbackURLs:
      - http://localhost
    Metadata:
      SamResourceId: UserPoolClient
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain:
        Ref: UserPoolClient
      UserPoolId:
        Ref: UserPool
    Metadata:
      SamResourceId: UserPoolDomain
  ApiAdministratorsUserPoolGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: User group for API Administrators
      GroupName:
        Ref: UserPoolAdminGroupName
      Precedence: 0
      UserPoolId:
        Ref: UserPool
    Metadata:
      SamResourceId: ApiAdministratorsUserPoolGroup
Outputs:
  StorageBookingsTable:
    Description: DynamoDB bookings table
    Value:
      Ref: StorageBookingsTable
  StorageUnitsTable:
    Description: DynamoDB storage units table
    Value:
      Ref: StorageUnitsTable
  BookStorageUnitFunction:
    Description: Lambda function used to perform actions on storage units data
    Value:
      Ref: BookStorageUnitFunction
  ListStorageUnitsFunction:
    Description: Lambda function used to perform actions on storage units
    Value:
      Ref: ListStorageUnitsFunction
  APIEndpoint:
    Description: API Gateway endpoint URL
    Value:
      Fn::Sub: https://${RestAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod
  UserPool:
    Description: Cognito User Pool ID
    Value:
      Ref: UserPool
  UserPoolClient:
    Description: Cognito User Pool Application Client ID
    Value:
      Ref: UserPoolClient
  UserPoolAdminGroupName:
    Description: User Pool group name for API administrators
    Value:
      Ref: UserPoolAdminGroupName
  CognitoLoginURL:
    Description: Cognito User Pool Application Client Hosted Login UI URL
    Value:
      Fn::Sub: https://${UserPoolClient}.auth.${AWS::Region}.amazoncognito.com/login?client_id=${UserPoolClient}&response_type=code&redirect_uri=http://localhost
  CognitoAuthCommand:
    Description: AWS CLI command for Amazon Cognito User Pool authentication
    Value:
      Fn::Sub: aws cognito-idp initiate-auth --auth-flow USER_PASSWORD_AUTH --client-id
        ${UserPoolClient} --auth-parameters USERNAME=<user@example.com>,PASSWORD=<password>
        --query "AuthenticationResult.IdToken" --output text
