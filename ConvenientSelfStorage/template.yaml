AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Resources:
  # Cognito User Pool
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: serverless-convenient-storage-userpool
      AliasAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true

  # Cognito User Pool Client
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: StorageUserPoolClient
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH
        - CUSTOM_AUTH_FLOW_ONLY
        - USER_PASSWORD_AUTH
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      CallbackURLs:
        - https://placeholder/callback  # Replace with your actual callback URL once deployed
      LogoutURLs:
        - https://placeholder/logout  # Replace with your actual logout URL once deployed

  # API Gateway
  NewRestAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: Serverless-convenient-self-storage-API
      StageName: Prod
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn
      DefinitionBody:
        openapi: 3.0.1
        info:
          title: Storage API
          description: API for managing storage units
          version: '1.0'
        paths:
          /storage/units/book:
            post:
              security:
                - CognitoAuthorizer: []
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BookStorageUnitFunction.Arn}/invocations"
                httpMethod: POST
                type: "AWS_PROXY"
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: "#/components/schemas/ApplicationJsonModel"
              responses:
                '200':
                  description: Success
                '400':
                  description: Client error
                '500':
                  description: Server error
          /storage/units:
            get:
              security:
                - CognitoAuthorizer: []
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListStorageUnitsFunction.Arn}/invocations"
                httpMethod: GET
                type: "AWS_PROXY"
              responses:
                '200':
                  description: Success
                '400':
                  description: Client error
                '500':
                  description: Server error
        components:
          schemas:
            ApplicationJsonModel:
              type: object
              properties:
                unit_id:
                  type: string
                customer_id:
                  type: string
                start_date:
                  type: string
                  format: date
                end_date:
                  type: string
                  format: date
                payment_method:
                  type: string
              required:
                - unit_id
                - customer_id
                - start_date
                - end_date
                - payment_method

  # Lambda Function for Booking Storage Unit
  BookStorageUnitFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: booking.lambda_handler
      Runtime: python3.9
      CodeUri: src/api/storage/book
      Environment:
        Variables:
          UNITS_TABLE: StorageUnits
          BOOKINGS_TABLE: StorageBookings
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - dynamodb:GetItem
            Resource: 
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/StorageUnits"
        - Statement:
            Effect: Allow
            Action:
              - dynamodb:PutItem
            Resource: 
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/StorageBookings"
      Events:
        PostBooking:
          Type: Api
          Properties:
            RestApiId: !Ref NewRestAPI
            Path: /storage/units/book
            Method: post

  # Lambda Function for Listing Storage Units
  ListStorageUnitsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: list_storage_units.lambda_handler
      Runtime: python3.9
      CodeUri: src/api/storage/list
      Environment:
        Variables:
          TABLE_NAME: StorageUnits
      Events:
        GetUnits:
          Type: Api
          Properties:
            RestApiId: !Ref NewRestAPI
            Path: /storage/units
            Method: get

Outputs:
  # API Gateway endpoint URL
  APIEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${NewRestAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod"