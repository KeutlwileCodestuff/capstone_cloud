AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Runtime: python3.9
    MemorySize: 128
    Timeout: 100
    Tracing: Active

Parameters:
  UserPoolAdminGroupName:
    Description: User pool group name for API administrators 
    Type: String
    Default: apiAdmins

Resources:
  StorageUnitsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: StorageUnits
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  StorageBookingsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: StorageBookings
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  
  RestAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      DefinitionBody:
        openapi: 3.0.1
        info:
          title: Storage API
          description: API for managing storage units
          version: '1.0'
        paths:
          /storage/units/book:
            post:
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BookStorageUnitFunction.Arn}/invocations"
                httpMethod: POST
                type: "AWS_PROXY"
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: "#/components/schemas/ApplicationJsonModel"
              responses:
                '200':
                  description: Success
                '400':
                  description: Client error
                '500':
                  description: Server error
        components:
          schemas:
            ApplicationJsonModel:
              type: object
              properties:
                unit_id:
                  type: string
                customer_id:
                  type: string
                start_date:
                  type: string
                  format: date
                end_date:
                  type: string
                  format: date
                payment_method:
                  type: string
              required:
                - unit_id
                - customer_id
                - start_date
                - end_date
                - payment_method
      TracingEnabled: true
      Tags:
        Name: !Sub "${AWS::StackName}-API"
        Stack: !Sub "${AWS::StackName}"

  
  ListStorageUnitsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: list_storage_units.lambda_handler
      Runtime: python3.9
      CodeUri: src/api/storage/list
      Environment:
        Variables:
          TABLE_NAME: StorageUnits
      Events:
        GetUnits:
          Type: Api
          Properties:
            RestApiId: !Ref RestAPI
            Path: /storage/units
            Method: get

  BookStorageUnitFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: booking.lambda_handler
      Runtime: python3.9
      CodeUri: src/api/storage/book
      Environment:
        Variables:
          UNITS_TABLE: StorageUnits
          BOOKINGS_TABLE: StorageBookings
      Policies:
      - Statement:
          Effect: Allow
          Action:
            - dynamodb:GetItem
          Resource: 
            - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/StorageUnits"
      - Statement:
          Effect: Allow
          Action:
            - dynamodb:PutItem
          Resource: 
            - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/StorageBookings"
      Events:
        PostBooking:
          Type: Api
          Properties:
            RestApiId: !Ref RestAPI
            Path: /storage/units/book
            Method: post
            RequestModel:
              Model: ApplicationJsonModel
              Required: true
  
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties: 
      UserPoolName: !Sub ${AWS::StackName}-UserPool
      AdminCreateUserConfig: 
        AllowAdminCreateUserOnly: false
      AutoVerifiedAttributes: 
        - email
      Schema: 
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
      UsernameAttributes: 
        - email
      UserPoolTags:
          Key: Name
          Value: !Sub ${AWS::StackName} User Pool
  
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties: 
      ClientName: 
        !Sub ${AWS::StackName}UserPoolClient
      ExplicitAuthFlows: 
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      GenerateSecret: false
      PreventUserExistenceErrors: ENABLED
      RefreshTokenValidity: 30
      SupportedIdentityProviders: 
        - COGNITO
      UserPoolId: !Ref UserPool
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - 'code'
      AllowedOAuthScopes:
        - 'email'
        - 'openid'
      CallbackURLs:
        - 'http://localhost'
  
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties: 
      Domain: !Ref UserPoolClient
      UserPoolId: !Ref UserPool

  ApiAdministratorsUserPoolGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: User group for API Administrators
      GroupName: !Ref UserPoolAdminGroupName
      Precedence: 0
      UserPoolId: !Ref UserPool


Outputs:
  StorageBookingsTable:
    Description: DynamoDB bookings table
    Value: !Ref StorageBookingsTable

  StorageUnitsTable:
    Description: DynamoDB storage units table
    Value: !Ref StorageUnitsTable

  BookStorageUnitFunction:
    Description: "Lambda function used to perform actions on storage units data"
    Value: !Ref BookStorageUnitFunction
  
  ListStorageUnitsFunction:
    Description: "Lambda function used to perform actions on storage units"
    Value: !Ref ListStorageUnitsFunction

  APIEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${RestAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod"

  UserPool:
    Description: Cognito User Pool ID
    Value: !Ref UserPool

  UserPoolClient:
    Description: Cognito User Pool Application Client ID
    Value: !Ref UserPoolClient

  UserPoolAdminGroupName:
    Description: User Pool group name for API administrators
    Value: !Ref UserPoolAdminGroupName
  
  CognitoLoginURL:
    Description: Cognito User Pool Application Client Hosted Login UI URL
    Value: !Sub 'https://${UserPoolClient}.auth.${AWS::Region}.amazoncognito.com/login?client_id=${UserPoolClient}&response_type=code&redirect_uri=http://localhost'

  CognitoAuthCommand:
    Description: AWS CLI command for Amazon Cognito User Pool authentication
    Value: !Sub 'aws cognito-idp initiate-auth --auth-flow
    USER_PASSWORD_AUTH --client-id ${UserPoolClient} --auth-parameters
    USERNAME=<user@example.com>,PASSWORD=<password> --query
    "AuthenticationResult.IdToken" --output text'