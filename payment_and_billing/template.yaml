AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  UserPoolAdminGroupName:
    Type: String
    Description: Name of the User Pool Admin Group
    Default: DefaultAdminGroupName

Globals:
  Function:
    Runtime: python3.9
    MemorySize: 128
    Timeout: 100
    Tracing: Active

Resources:
  PaymentMethodsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: PaymentMethods
      AttributeDefinitions:
        - AttributeName: paymentMethodId
          AttributeType: S
      KeySchema:
        - AttributeName: paymentMethodId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  BillingTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Billing
      AttributeDefinitions:
        - AttributeName: billingId
          AttributeType: S
      KeySchema:
        - AttributeName: billingId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  
  DiscountsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Discounts
      AttributeDefinitions:
        - AttributeName: discountId
          AttributeType: S
      KeySchema:
        - AttributeName: discountId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  AddPaymentMethodFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: add_payment_method.lambda_handler
      CodeUri: ./payment_billing/
      Runtime: python3.9
      MemorySize: 128
      Timeout: 10
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PaymentMethodsTable
      Events:
        AddPaymentMethodApi:
          Type: Api
          Properties:
            RestApiId: !Ref RestAPI
            Path: /payment-methods
            Method: POST
            Auth:
              Authorizer: LambdaTokenAuthorizer

  UpdatePaymentMethodFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: update_payment_method.lambda_handler
      CodeUri: ./payment_billing/
      Runtime: python3.9
      MemorySize: 128
      Timeout: 10
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PaymentMethodsTable
      Events:
        UpdatePaymentMethodApi:
          Type: Api
          Properties:
            RestApiId: !Ref RestAPI
            Path: /payment-methods/{paymentMethodId}
            Method: PUT
            Auth:
              Authorizer: LambdaTokenAuthorizer

  DeletePaymentMethodFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: delete_payment_method.lambda_handler
      CodeUri: ./payment_billing/
      Runtime: python3.9
      MemorySize: 128
      Timeout: 10
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PaymentMethodsTable
      Events:
        DeletePaymentMethodApi:
          Type: Api
          Properties:
            RestApiId: !Ref RestAPI
            Path: /payment-methods/{paymentMethodId}
            Method: DELETE
            Auth:
              Authorizer: LambdaTokenAuthorizer

  CreateBillingRecordFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: create_billing_record.lambda_handler
      CodeUri: ./payment_billing/
      Runtime: python3.9
      MemorySize: 128
      Timeout: 10
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BillingTable
      Events:
        CreateBillingRecordApi:
          Type: Api
          Properties:
            RestApiId: !Ref RestAPI
            Path: /billing
            Method: POST
            Auth:
              Authorizer: LambdaTokenAuthorizer

  ApplyDiscountFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: apply_discount.lambda_handler
      CodeUri: ./payment_billing/
      Runtime: python3.9
      MemorySize: 128
      Timeout: 10
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BillingTable
      Events:
        ApplyDiscountApi:
          Type: Api
          Properties:
            RestApiId: !Ref RestAPI
            Path: /discounts
            Method: POST
            Auth:
              Authorizer: LambdaTokenAuthorizer

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties: 
      UserPoolName: !Sub ${AWS::StackName}-UserPool
      AdminCreateUserConfig: 
        AllowAdminCreateUserOnly: false
      AutoVerifiedAttributes: 
        - email
      Schema: 
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
      UsernameAttributes: 
        - email
      UserPoolTags:
        Key: Name
        Value: !Sub ${AWS::StackName} User Pool

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties: 
      ClientName: !Sub ${AWS::StackName}UserPoolClient
      ExplicitAuthFlows: 
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      GenerateSecret: false
      PreventUserExistenceErrors: ENABLED
      RefreshTokenValidity: 30
      SupportedIdentityProviders: 
        - COGNITO
      UserPoolId: !Ref UserPool
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - 'code'
      AllowedOAuthScopes:
        - 'email'
        - 'openid'
      CallbackURLs:
        - 'http://localhost'

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties: 
      Domain: !Ref UserPoolClient
      UserPoolId: !Ref UserPool

  ApiAdministratorsUserPoolGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: User group for API Administrators
      GroupName: !Ref UserPoolAdminGroupName
      Precedence: 0
      UserPoolId: !Ref UserPool

  RestAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      TracingEnabled: true
      Tags:
        Name: !Sub "${AWS::StackName}-API"
        Stack: !Sub "${AWS::StackName}"
      Auth:
        DefaultAuthorizer: LambdaTokenAuthorizer
        Authorizers:
          LambdaTokenAuthorizer:
            FunctionArn: !GetAtt AuthorizerFunction.Arn
            Identity:
              Headers:
                - Authorization

  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: authorizer.lambda_handler
      CodeUri: ./payment_billing/authorizer/
      Runtime: python3.9
      Policies:
        - AWSLambdaBasicExecutionRole
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          APPLICATION_CLIENT_ID: !Ref UserPoolClient
          ADMIN_GROUP_NAME: !Ref UserPoolAdminGroupName

Outputs:
  PaymentMethodsTable:
    Description: DynamoDB table for storing payment methods
    Value: !Ref PaymentMethodsTable

  BillingTable:
    Description: DynamoDB table for storing billing records
    Value: !Ref BillingTable

  DiscountsTable:
    Description: DynamoDB table for storing discounts
    Value: !Ref DiscountsTable

  ApplyDiscountFunction:
    Description: Lambda function for applying discounts
    Value: !GetAtt ApplyDiscountFunction.Arn

  AddPaymentMethodFunction:
    Description: Lambda function for adding payment methods
    Value: !GetAtt AddPaymentMethodFunction.Arn
  
  UpdatePaymentMethodFunction:
    Description: Lambda function for updating payment methods
    Value: !GetAtt UpdatePaymentMethodFunction.Arn

  DeletePaymentMethodFunction:
    Description: Lambda function for deleting payment methods
    Value: !GetAtt DeletePaymentMethodFunction.Arn

  CreateBillingRecordFunction:
    Description: Lambda function for creating billing records
    Value: !GetAtt CreateBillingRecordFunction.Arn

  UserPool:
    Description: Cognito User Pool ID
    Value: !Ref UserPool

  UserPoolClient:
    Description: Cognito User Pool Application Client ID
    Value: !Ref UserPoolClient

  UserPoolAdminGroupName:
    Description: User Pool group name for API administrators
    Value: !Ref UserPoolAdminGroupName
  
  CognitoLoginURL:
    Description: Cognito User Pool Application Client Hosted Login UI URL
    Value: !Sub 'https://${UserPoolClient}.auth.${AWS::Region}.amazoncognito.com/login?client_id=${UserPoolClient}&response_type=code&redirect_uri=http://localhost'

  CognitoAuthCommand:
    Description: AWS CLI command for Amazon Cognito User Pool authentication
    Value: !Sub 'aws cognito-idp initiate-auth --auth-flow USER_PASSWORD_AUTH --client-id ${UserPoolClient} --auth-parameters USERNAME=<user@example.com>,PASSWORD=<password> --query "AuthenticationResult.IdToken" --output text'